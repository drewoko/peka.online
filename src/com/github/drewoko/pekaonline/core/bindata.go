// Code generated by go-bindata.
// sources:
// static/index.html
// DO NOT EDIT!

package core

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x57\x5f\x6f\xd3\x4a\x16\x7f\xcf\xa7\x98\xb5\x90\xe2\x80\x33\x4e\x8a\x40\x6c\xeb\x64\x05\x5b\x28\x2f\xfc\x91\xb6\x7d\xa8\xaa\x3e\x4c\xe3\xa9\xe3\x12\x7b\x82\x3d\x69\xa8\x28\x52\x9b\xc0\x16\x54\xb6\xc0\xf2\xb2\xda\x97\x5d\xee\xfd\x00\x37\x2d\xcd\x25\x4d\xdb\xf0\x15\xce\x7c\xa3\xab\x33\x93\xa4\x7f\x6e\xb9\x08\x2e\x7e\x88\xed\x33\xe7\xcf\xef\xfc\xce\x19\xcf\x89\xf7\x97\xe9\x07\x7f\x9f\x9d\x7f\x78\x9b\x54\x65\x54\x2b\x67\x3c\xbc\x91\x1a\x8b\x83\x92\xc5\x63\x0b\x05\x9c\xf9\xe5\x0c\x21\x84\x78\x11\x97\x8c\x54\xaa\x2c\x49\xb9\x2c\x59\x73\xb3\x77\xf2\x37\xac\xe1\x92\x0c\x65\x8d\x97\x1f\xf2\x47\x8c\x3e\x88\x6b\x61\xcc\x3d\xd7\x88\xcc\x72\x5a\x49\xc2\xba\x24\x69\x52\x29\x59\x55\x29\xeb\xe9\xa4\xeb\x56\x84\xcf\xe9\xca\xe3\x06\x4f\xd6\x68\x45\x44\xae\x79\xcc\x5f\xa5\x45\x5a\xa4\x51\x18\xd3\x95\xd4\x2a\x7b\xae\x31\xfd\x82\x9f\x49\xd7\x8d\x44\xc4\x63\xb9\x92\x6a\x1f\xbe\x68\xc6\x35\xc1\xfc\x74\x28\xfe\x8a\x1f\xb9\x56\xe7\x25\x4b\xf2\x27\xd2\x5d\x61\xab\xcc\x48\x87\x29\xe1\xb5\xdc\x88\x2b\x32\x14\x31\x09\xb8\xbc\x23\x92\x88\x49\xc9\xfd\x69\x26\xd9\x3f\x64\x12\xc6\x81\x9d\x4a\x16\xd5\x73\xe4\xe9\xd8\x00\xaf\x55\x96\x10\x9f\x49\x4e\x4a\x24\xe6\x4d\x32\xcd\x24\x37\x8a\x97\x8b\x85\x42\x21\x37\x75\x46\x39\xe1\xb2\x91\xc4\xc4\xa0\xb5\xd1\x2c\x47\x97\x75\x24\x3b\x3b\x3d\x9d\xbf\x77\x2f\x3f\x3f\x3f\x3f\x4f\xee\xde\x9d\x8c\xa2\xec\x29\xdb\x67\x99\xf1\xe3\x25\x7b\x0c\xd3\x3e\x8f\xe5\x12\x65\x2b\xec\x89\x7d\x56\x88\x57\x23\xa9\x4d\x12\xcb\x4d\x25\x93\xa9\x75\x66\xf5\x59\x8e\xfa\x22\xe6\x63\xa7\x08\x8a\x9d\xf7\x6b\x7c\x73\x56\xa9\xea\x65\xe7\x84\x29\x3b\x74\xc8\x2a\xab\x5d\x64\x60\xc0\x66\x25\x5b\xaa\x71\x22\x97\x84\xbf\x96\xcd\x51\x56\xaf\xf3\xd8\xb7\x2d\x4f\x26\x65\x8b\x5c\xb9\xd0\x08\x2f\xcb\x93\x7e\xd9\xba\xf2\x85\x42\xac\xb2\x1a\x9d\x0d\x23\x9e\xbb\x62\x79\x2e\x2a\x7e\xdd\x13\x9a\xcc\xcc\xdc\xe3\x69\xca\x02\x9e\x7e\x9b\x1d\xf6\xf9\xf7\x59\xce\xcc\xcc\xc5\xe1\xe3\xb9\x94\x27\xdf\x11\xf2\xdb\x4c\x5d\x64\xf4\x5c\xbb\x11\x5d\xe0\x73\xf5\x3e\xd5\x55\x66\xe9\x64\xb3\x78\xae\xd9\xfe\x1e\x56\xab\x9c\xc9\x78\xd5\xa2\xd9\xe4\x62\xb8\xc9\xab\x45\x94\xd6\xcd\x96\x81\x0f\xd0\x81\x03\xd5\x22\x70\x0c\x1d\x02\x7d\x18\xc0\x21\x74\xe1\x18\xfa\xd0\x25\x30\x50\x2d\xe2\x27\xbc\x29\x1e\x09\x02\x9f\x50\xe1\x33\x74\xd4\x86\x6a\x13\xb5\x05\x1d\xb5\x09\x03\xd8\xa3\x04\x3e\xa8\x96\xda\x80\x1e\x7c\x84\xae\xda\xd0\xd6\xc7\x6a\x1b\x0e\x88\xc7\x48\x35\xe1\xcb\xe3\x7d\x5f\xe7\x8f\xd8\x04\x95\xab\xee\x44\xa1\x78\xdd\x2d\x4e\xb8\x13\x7f\x75\xeb\x22\xe5\x69\x95\xf1\x48\xa4\x32\x5f\x17\x89\x64\x35\x96\x0f\x84\xf0\x03\x16\xf1\x7c\xd2\xb0\xca\x7f\xc2\xd8\x73\x59\x99\xa8\x4d\xd5\x82\x8e\x6a\xa9\xd7\xea\x1d\x1c\x50\xe2\x2d\x25\xc3\xdc\xff\x0f\x5d\xf5\x12\x7a\x70\x88\x79\x0d\xd4\x26\x1c\x61\xc6\x98\x02\x6a\x13\x9d\x4b\x07\x0e\xd5\x6b\x38\x56\x6d\xb5\x33\xf6\x04\x3d\xfd\xd4\x83\xbe\x6a\x13\xe8\x40\x5f\xbf\xec\x61\xd6\xea\x85\xf6\xa5\x8d\x3e\x21\x3d\x5a\xbf\xab\x49\x3d\x18\x92\xbc\x0f\x7b\xaa\x3d\x54\x54\x1b\xe8\x12\x0e\xa1\xa3\x5e\x9c\x86\xf6\x5f\x74\x4b\xd4\xbf\x54\x0b\x06\x18\x77\x0b\x7a\x5a\x11\x91\x6d\xaa\x37\x7f\x23\xf0\x0e\xc9\x56\x6d\xf3\x4e\x74\x90\xbe\x6a\xab\x57\xd0\xc3\xca\x9d\x01\x05\x5d\x07\x43\x77\x89\xda\x84\xbe\xda\x50\xdb\xaa\x85\x42\x2c\x77\x07\x21\xc1\xa1\xda\x26\x36\xf4\x86\x4a\x2d\xd8\x23\xd0\xd3\xe9\x63\x9e\xba\xb4\x47\x6a\x1b\x65\xb0\x0b\x5d\xf8\x44\xe0\x08\xd3\x81\x63\xdd\x05\x2d\x4c\x33\xa7\x2d\xc6\x38\xd5\xce\x08\x17\xf6\xc8\x00\x76\xd5\x2b\xdd\x17\x3d\xf5\x46\x2b\xb6\xf1\x59\x87\x37\xec\x6a\x34\x17\xf3\xa6\x81\x74\x30\xe8\x1e\xc6\xed\xe9\x5a\xb4\x54\x9b\x12\xf8\xc9\x90\xb4\x85\x10\x1c\x82\x42\xd3\xc8\x5d\xbc\xed\x61\x7c\xe8\x43\x0f\x99\xee\xc0\x31\xd2\x91\x87\x23\x6c\x77\xd8\xd7\x79\x0f\x60\xcf\x31\x4c\xb5\x61\x1f\x7e\xc5\xf4\x7a\x44\xb5\x28\xec\x9b\x1a\xbc\xc7\xc0\xea\xb9\x06\x8a\xa9\xa3\x9a\x09\x81\x85\xc3\xb4\x8f\x1c\xb3\x65\x3e\xa2\xc7\xa1\x86\x89\xbe\x6b\x72\x51\x2f\x31\x31\xc4\xfc\x1c\x6b\x8d\xe1\xd5\x3f\xa1\x67\x42\x21\x04\x23\x1b\xb3\x70\x80\xdd\xd1\xc3\xad\x86\xf4\x52\x73\x62\xc0\x5b\xf5\x82\x52\xaa\x4d\x3e\xab\x0d\x18\x10\x78\x0f\xef\xe9\x90\x17\xfd\xbb\xab\x1b\x77\x6b\x04\xf5\x2d\xfc\x0f\xfe\xa3\xb5\x1c\x6d\x75\xa8\x76\xd0\xaf\x41\x8b\xc8\xb1\x09\x46\x94\xef\x6b\xcc\x1b\x48\x80\xa6\x7d\x07\xf1\x77\xe1\x23\x0c\x74\xd0\x5f\x88\x96\xbe\x34\x44\x22\xd8\x23\x18\x40\x1f\xcb\x31\xea\x10\x9d\x46\x07\x8e\x51\x73\xa0\x13\x38\xa4\x94\x66\x3c\xb7\x8e\x5f\x1a\x3f\x5c\x1d\x4d\x1c\xfa\x18\x59\x12\x89\xcf\x93\x92\x55\x3c\x75\x6a\x7b\xf2\x64\x66\x39\x91\x25\xe5\xdf\x7d\x09\x3d\x59\x25\xcd\xd0\x97\xd5\x92\x55\xbc\x5e\xb0\xca\xf0\x6f\xbd\x4b\x8f\xd4\x1b\xcf\x95\xd5\x0b\xf5\xcb\xf0\xe1\x6c\x0f\x22\xcb\xfa\x63\xd6\x85\x7d\x8a\x8d\xa2\x3d\x98\x35\xb3\x45\x67\x84\xf0\x67\x58\xc4\x29\x7e\x42\x7e\x9c\xdb\x87\xc3\x4f\xd8\x1f\xf8\xfc\xf9\xfc\xc6\xf8\xca\x07\xe5\x47\xe4\xf1\x63\x63\x7e\x39\x49\x7d\xbc\x65\x4e\xbd\x9d\xad\xb9\xa7\xe7\x8b\xb2\xe7\x9a\xfb\xf0\x58\xd3\x3d\x83\xa7\x9a\x6e\xa3\x8c\x77\x7a\x26\x3c\x19\x78\x42\x27\x75\x84\x13\x38\x89\xc3\x9c\x28\xf7\x34\x5c\xc8\xce\x08\x11\xd4\xf8\xcd\x98\xd5\xd6\x64\x58\x49\x1f\x2c\xad\xf0\x8a\xcc\x2e\x96\x92\xa9\x70\x21\x59\x2c\xe1\xcf\xfa\xfa\xd8\x3e\x77\x76\xf4\xb1\x71\x99\x3e\x2e\x99\xdb\xfa\xfa\xc2\x62\x8e\xd6\x1b\x69\xd5\x66\x49\xd0\xc0\xb1\x2f\xcd\x3d\x73\xf4\x62\xad\x54\xbc\x3c\x1e\x19\x73\x53\xac\x94\xd2\x4a\xc2\x99\xe4\xb7\x6b\x5c\xcf\x87\x22\xe7\x8c\x5d\x47\xa5\x94\x06\x5c\x0e\x97\xd2\x5b\x6b\xb3\x2c\xb8\xcf\x22\x6e\x8b\xdc\x42\x61\x71\x8a\x51\x96\xae\xc5\x95\x52\x71\x8a\x51\x1c\x97\x83\xa9\x88\xd6\x59\xc2\x63\x79\x1f\xe7\xee\x30\x4e\x79\x22\x6f\xf1\x65\x91\x70\x1b\xd3\xcc\x98\xf3\xdf\x6e\x86\xb1\x2f\x9a\x8e\x2f\x2a\x1a\x9b\x93\x35\x1c\x65\x9d\xec\x68\x6e\x6f\x36\x9b\x34\xd0\x84\xe4\xd9\x88\x11\x3d\x7c\x9f\xbc\xad\xa4\x59\x27\x1b\x30\x1c\x58\xb5\xdf\x80\xd9\x59\x93\x49\xd6\x21\xd9\xb9\x9b\xf9\xeb\x85\x1b\x85\x1b\xd7\x0a\x57\xf3\xd7\x50\xc0\x1a\x52\x8c\x86\x5b\x54\x4d\x79\xec\xa3\xbc\xce\x02\xbe\x1a\xf2\xa6\xf6\x73\x32\x94\x64\x3c\xd7\x14\xd5\x73\xf5\x9f\x96\xdf\x02\x00\x00\xff\xff\x07\xff\x6a\xdd\xc4\x0c\x00\x00")

func staticIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_staticIndexHtml,
		"static/index.html",
	)
}

func staticIndexHtml() (*asset, error) {
	bytes, err := staticIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/index.html", size: 3268, mode: os.FileMode(420), modTime: time.Unix(1483052503, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/index.html": staticIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{staticIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

